{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @ingroup templates
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set classes = [
	node.bundle|clean_class,
	node.isPromoted() ? 'is-promoted',
	node.isSticky() ? 'is-sticky',
	not node.isPublished() ? 'is-unpublished',
	view_mode ? view_mode|clean_class,
	'clearfix',
] %}

{% set recipe_tags = {} %}
{% if node.field_recipe_tag_course is not empty %}
	{% for item in node.field_recipe_tag_course %}
		{% set recipe_tags = recipe_tags|merge({ (item.entity.tid.value) : (item.entity.name.value) }) %}
	{% endfor %}
{% endif %}
{% set recipe_course =  recipe_tags|join('|') %}

<script> dataLayer = dataLayer || [];
  dataLayer.push({
    "recipeInformation": {
      "recipeID": "{{ node.field_recipe_id.value }}",
      "recipeCourse": "{{ recipe_course }}",
      "recipeTotalTime": "{{ node.field_recipe_total_time.value }}",
      "recipeBrand": "{{ node.field_recipe_brand.value }}",
      "recipeChefName": "{{ node.field_recipe_chefname.value }}",
      "numberOfServings": "{{ node.field_recipe_number_servings.value }}",
      "recipeDifficulty": "{{ node.field_recipe_difficulty.value }}",
    }
  });
</script>
<article{{ attributes.addClass(classes) }}>
	{{ title_prefix }}
	{% if not page %}
		<h2{{ title_attributes }}>
			<a href="{{ url }}" rel="bookmark">{{ label }}</a>
		</h2>
	{% endif %}
	{{ title_suffix }}
	
	{% if display_submitted %}
		<footer>
			{{ author_picture }}
			<div{{ author_attributes.addClass('author') }}>
				{% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
				{{ metadata }}
			</div>
		</footer>
	{% endif %}
	<div{{ content_attributes.addClass('content') }}>
		<div class='container-fluid'>
			<div class='row'>
				<div class='col-xs-12'>
					{{ content.field_recipe_images }}
				</div>
			</div>
		</div>
		<div class='row'>
			<div class='col-sm-10 col-sm-offset-1'>
				<div class='row' style="text-align: center;">
					<div class='col-sm-12'>
						{% if node.field_recipe_isnew.value %}
							<button type="button" class="btn btn-danger">Is new!</button>
						{% endif %}
						<span
							class="badge">{{ content.field_recipe_chefname }}</span> {{ field_recipe_brand }}
					</div>
					<div class='col-sm-12'>
						<table class="table">
							<tbody>
							<tr class="info">
								{{ content.field_recipe_description }}
							</tr>
							</tbody>
						</table>
					</div>
					<div class='col-sm-12'>
						<div class='row'>
							<div class='col-sm-4'>
								<button type="button" class="btn btn-success">
									Time {{ content.field_recipe_prepa_time }}</span></button>
							</div>
							<div class='col-sm-4'>
								<button type="button" class="btn btn-warning">
									Difficulty {{ content.field_recipe_difficulty }} </button>
							</div>
							<div class='col-sm-4'>
								<button type="button" class="btn btn-primary">
									Servings {{ content.field_recipe_number_servings }}</button>
							</div>
						</div>
					</div>
					<div class='col-sm-12'>
						<!-- <button type="button" class="btn btn-primary"> Add to Meal planner </button> -->
					</div>
				</div>
				<div class='row'>
					<div class='col-sm-5'>
						<h3> The ingredients </h3>
						{{ content.field_recipe_ingredient }}
					</div>
					<div class='col-sm-7'>
						<h3> Macronutritonal score </h3>
						<div class='row'>
							{{ content.field_recipe_macronutrients }}
						</div>
					</div>
				</div>
				<div class='row'>
					<div class='col-sm-12'>
						{{ content.field_recipe_steps }}
						<div class='video'>
							{{ content.field_recipe_video }}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</article>
