{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
  'paragraph',
  'paragraph--type--' ~ paragraph.bundle|clean_class,
  view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }} {% if paragraph.field_section_id.value %} id = "{{ paragraph.field_section_id.value|replace({' ': ''}) }}" {% endif %} >
    {% block content %}
      {% if content.field_document is defined and content.field_document[0] %}
        <span class="file file--mime-application-pdf file--application-pdf icon-before">
          <span class="file-link">
            {% if paragraph.field_document.entity.field_document is defined %}
              {% set link_title =  paragraph.field_document.entity.field_document.entity.filename.value %}
              {% set file_uri =  paragraph.field_document.entity.field_document.entity.fileuri %}
              {% set file_size_value =  paragraph.field_document.entity.field_document.entity.filesize.value %}
              {% set file_mime =  paragraph.field_document.entity.field_document.entity.filemime.value %}
            {% else %}
              {% set link_title =  paragraph.field_document.entity.field_media_document.entity.filename.value %}
              {% set file_uri =  paragraph.field_document.entity.field_media_document.entity.fileuri %}
              {% set file_size_value =  paragraph.field_document.entity.field_media_document.entity.filesize.value %}
              {% set file_mime =  paragraph.field_document.entity.field_media_document.entity.filemime.value %}
            {% endif %}
            {% if content.field_c_title is defined and content.field_c_title|render is not empty %}
              {% set link_title = content.field_c_title[0] %}
            {% endif %}
            <a href="{{ file_url(file_uri) }}" type="{{ file_mime }}" target="_blank" data-toggle="tooltip" data-placement="bottom" data-original-title="Open file in new window"
            title = "{{ link_title }}">
              {% if paragraph.field_c_image is not empty %}
                  {{ content.field_c_image }}
              {% endif %}   
              {{ link_title }}
            </a>
          </span>
          {% set file_size = file_size_value / 1024 %}
          <span class="file-size">{{ file_size|number_format(2) }} KB</span>
        </span>
	  {% elseif content.field_c_document_upload[0] %}
		<span class="file file--mime-application-pdf file--application-pdf icon-before">
          <span class="file-link">
            {% if content.field_c_title is defined and content.field_c_title|render is not empty %}
              {% set link_title = content.field_c_title[0] %}
            {% else %}
              {% set link_title = content.field_c_document_upload[0]['#file'].filename.value %}
            {% endif %}
            <a href="{{ file_url(content.field_c_document_upload[0]['#file'].uri.value) }}" type="{{ content.field_c_document_upload[0]['#file'].filemime.value }}" target="_blank" data-toggle="tooltip" data-placement="bottom" data-original-title="Open file in new window" 
            title = "{{ link_title }}">
              {% if paragraph.field_c_image is not empty %}
                  {{ content.field_c_image }}
              {% endif %}   
              {{ link_title }}
            </a>
          </span>
          {% set file_size = content.field_c_document_upload[0]['#file'].filesize.value / 1024 %}
          <span class="file-size">{{ file_size|number_format(2) }} KB</span>
        </span>
      {% endif %}
    {% endblock %}
  </div>
{% endblock paragraph %}
