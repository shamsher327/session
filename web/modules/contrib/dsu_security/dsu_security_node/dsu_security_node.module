<?php

/**
 * @file
 * Module file for NDE DSU Security module.
 */

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Asset\AttachedAssetsInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\dsu_security_node\Form\NodeSecuritySettingsForm;


/**
 * Implements hook_js_alter().
 */
function dsu_security_node_js_alter(&$javascript, AttachedAssetsInterface $assets) {
  // If jquery_url config is present, we use that jquery globally.
  if (isset($javascript['core/assets/vendor/jquery/jquery.min.js'])) {
    $config = _dsu_security_node_get_security_configuration();
    $external_url = $config->get(NodeSecuritySettingsForm::FIELD_JQUERY_URL);
    $downloaded_file = $config->get(NodeSecuritySettingsForm::FIELD_JQUERY_DOWNLOAD);
    $version = $config->get(NodeSecuritySettingsForm::FIELD_JQUERY_VERSION);

    // Use the downloaded file if existing.
    if (!empty($downloaded_file) && file_exists($downloaded_file)) {
      $realpath = Drupal::service('file_system')->realpath($downloaded_file);
      $path = str_replace(DRUPAL_ROOT . '/', '', $realpath);
      $javascript['core/assets/vendor/jquery/jquery.min.js']['data'] = $path;
      $javascript['core/assets/vendor/jquery/jquery.min.js']['version'] = $version;
    }
    elseif (!empty($external_url) && UrlHelper::isValid($external_url)) {
      // Use the path directly if not.
      // To be clarified whether or not to use type external
      // If type is external the asset will be excluded from aggregation.
      $javascript['core/assets/vendor/jquery/jquery.min.js']['data'] = $external_url;
      $javascript['core/assets/vendor/jquery/jquery.min.js']['version'] = $version;
    }
  }
}

/**
 * Get dsu_security_node module configuration.
 *
 * @return object
 *   Configuration object.
 */
function _dsu_security_node_get_security_configuration() {
  return Drupal::config(NodeSecuritySettingsForm::CONFIG);
}

/**
 * Get editable dsu_security_node module configuration.
 *
 * @return object
 *   Editable configuration object.
 */
function _dsu_security_node_get_security_configuration_editable() {
  /** @var \Drupal\Core\Config\ConfigFactoryInterface $config_factory */
  $config_factory = Drupal::service('config.factory');
  return $config_factory->getEditable(NodeSecuritySettingsForm::CONFIG);
}

/**
 * Wrapper to download jquery and update config.
 */
function _dsu_security_node_download_jquery() {
  $directory = NodeSecuritySettingsForm::FOLDER;
  $destination = $directory . 'jquery.min.js';

  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = Drupal::service('file_system');
  $file_system->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);

  $config = _dsu_security_node_get_security_configuration_editable();
  $jquery_url = $config->get(NodeSecuritySettingsForm::FIELD_JQUERY_URL);

  if (!empty($jquery_url)) {
    $downloaded_file = system_retrieve_file($jquery_url, $destination, FALSE, FileSystemInterface::EXISTS_REPLACE);
    $config->set(NodeSecuritySettingsForm::FIELD_JQUERY_DOWNLOAD, $downloaded_file);
    $config->save();
  }

}

/**
 * This module should always have greater weight than dsu_security.
 */
function _dsu_security_node_set_weight() {
  $weight = _dsu_security_node_get_module_weight('dsu_security');
  if (is_int($weight) && $weight >= 0) {
    module_set_weight('dsu_security_node', $weight + 10);
  }
}

/**
 * Returns the weight of a module calculating like module_set_weight does.
 *
 * @param string $module
 *   Module name.
 *
 * @return int
 *   Weight.
 */
function _dsu_security_node_get_module_weight($module) {
  $extension_config = Drupal::configFactory()->get('core.extension');
  if ($extension_config->get("module.$module") !== NULL) {
    return $extension_config->get("module.$module");
  }
  return -1;
}
