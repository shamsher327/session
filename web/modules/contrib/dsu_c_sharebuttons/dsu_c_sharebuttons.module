<?php

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Template\Attribute;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\social_media\Event\SocialMediaEvent;

/**
 * Implements HOOK_preprocess_theme().
 */
function dsu_c_sharebuttons_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__c_share_buttons' => [
      'template'  => 'paragraph--c-share-buttons',
      'base hook' => 'paragraphs',
    ],
    'dsu_social_media_links'     => [
      'template'  => 'dsu-social-media-links',
      'base hook' => 'social_media_links',
    ],
  ];
}

/**
 * Implements HOOK_preprocess_HOOK for paragraph.html.twig.
 */
function dsu_c_sharebuttons_preprocess_paragraph(&$variables) {
  if ($variables['paragraph']->getType() == 'c_share_buttons') {
    $variables['#attached']['library'][] = 'dsu_c_sharebuttons/share-buttons';
    // Get node value for event tracking.
    $node = \Drupal::routeMatch()->getParameter('node');
    global $base_url;
    $selected_social_medias = [];
    foreach ($variables['paragraph']->get('field_c_select_media')->getValue() as $selected_social_media) {
      $selected_social_medias[] = $selected_social_media['value'];
    }

    $library = ['social_media/basic'];
    $settings = [];
    $icon_path = $base_url . '/' . drupal_get_path('module', 'social_media') . '/icons/';
    $elements = [];
    $social_medias = \Drupal::config('social_media.settings')->get('social_media');
    $event_dispatcher = \Drupal::getContainer()->get('event_dispatcher');

    $event = new SocialMediaEvent($social_medias);
    $event_dispatcher->dispatch('social_media.pre_execute', $event);
    $social_medias = $event->getElement();

    $social_medias = sortSocialMedias($social_medias);
    foreach ($social_medias as $name => $social_media) {
      if (!in_array($name, $selected_social_medias)) {
        continue;
      }

      $elements[$name]['entity_type'] = is_object($node) ? $node->type->entity->label() : '';
      $elements[$name]['entity_title'] = is_object($node) ? $node->getTitle() : '';
      // replace api url with different link.
      if ($name == "email" && isset($social_media['enable_forward']) && $social_media['enable_forward']) {
        $social_media['api_url'] = str_replace('mailto:', '/social-media-forward', $social_media['api_url']);
        $social_media['api_url'] .= '&destination=' . \Drupal::service('path.current')->getPath();
        if (isset($social_media['show_forward']) && $social_media['show_forward'] == 1) {
          $library[] = 'core/drupal.dialog.ajax';
        }
      }

      if ($social_media['enable'] == 1 && !empty($social_media['api_url'])) {
        $elements[$name]['text'] = $social_media['text'];
        $elements[$name]['api'] = new Attribute([
          $social_media['api_event'] => \Drupal::token()
            ->replace($social_media['api_url']),
        ]);

        if (isset($social_media['library']) && !empty($social_media['library'])) {
          $library[] = $social_media['library'];
        }
        if (isset($social_media['attributes']) && !empty($social_media['attributes'])) {
          $elements[$name]['attr'] = social_media_convert_attributes($social_media['attributes']);
        }
        if (isset($social_media['drupalSettings']) && !empty($social_media['drupalSettings'])) {
          $settings['social_media'] = social_media_convert_drupalSettings($social_media['drupalSettings']);
        }

        if (isset($social_media['default_img']) && $social_media['default_img']) {
          $elements[$name]['img'] = $icon_path . $name . '.svg';
        }
        else {
          if (!empty($social_media['img'])) {
            $elements[$name]['img'] = $base_url . '/' . $social_media['img'];
          }
        }

        if (isset($social_media['enable_forward']) && $social_media['enable_forward']) {
          if (isset($social_media['show_forward']) && $social_media['show_forward'] == 1) {
            $elements[$name]['forward_dialog'] = $social_media['show_forward'];
          }

        }

      }
    }

    // call prerender event before render.
    $event = new SocialMediaEvent($elements);
    $event_dispatcher->dispatch('social_media.pre_render', $event);
    $elements = $event->getElement();

    $variables['content']['field_c_select_media'] = [
      '#theme'    => 'dsu_social_media_links',
      '#elements' => $elements,
      '#attached' => [
        'library'        => $library,
        'drupalSettings' => $settings,
      ],
      '#cache'    => [
        'tags'     => [
          'social_media:' . \Drupal::service('path.current')->getPath(),
        ],
        'contexts' => [
          'url',
        ],
      ],
    ];
  }
}

/**
 * Callback function to get allowed values for select media field.
 */
function dsu_c_sharebuttons_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  global $base_url;
  $social_medias = getSocialMedias();
  $config = \Drupal::config('social_media.settings');
  $options = [];
  foreach ($social_medias as $key => $label) {
    if ($config->get('social_media.' . $key . '.enable') == 1) {
      $options[$key] = $label;
    }
  }
  return $options;
}

/**
 * Callback function to get a list of all social media items
 *
 * @return type
 */
function getSocialMedias() {
  $element = [
    'facebook_share' => 'Facebook share',
    'facebook_msg'   => 'Facebook messenger',
    'linkedin'       => 'Linkedin',
    'twitter'        => 'Twitter',
    'email'          => 'Email',
    'whatsapp'       => 'WhatsApp',
  ];

  $event = new SocialMediaEvent($element);
  $event_dispatcher = \Drupal::getContainer()->get('event_dispatcher');
  $event_dispatcher->dispatch('social_media.add_more_link', $event);
  $element = $event->getElement();

  return $element;
}

/**
 * Callback function to sort social media elements based on their weight setting.
 */
function sortSocialMedias(&$element) {
  $weight = [];
  foreach ($element as $key => $row) {
    $weight[$key] = $row['weight'];
  }
  array_multisort($weight, SORT_ASC, $element);
  return $element;
}

/**
 * Callback function to convert social media setting attributes into real one in order to apply them to links
 */
function social_media_convert_attributes($variables) {
  $variable = explode("\n", $variables);
  $attributes = [];
  if (count($variable)) {
    foreach ($variable as $each) {
      $var = explode("|", $each);
      $value = str_replace(["\r\n", "\n", "\r"], "", $var[1]);
      $attributes[$var[0]] = new Attribute([$var[0] => $value]);
    }
  }
  return $attributes;
}

/**
 * Callback function to convert social media drupal setting config variable to actual drupalSettings
 */
function social_media_convert_drupalSettings($variables) {
  $variable = explode("\n", $variables);
  $settings = [];
  if (count($variable)) {
    foreach ($variable as $each) {
      $var = explode("|", $each);
      $settings[$var[0]] = str_replace(["\r\n", "\n", "\r"], "", $var[1]);
    }
  }
  return $settings;
}

/**
 * Implements hook_ln_sample_content().
 */
function dsu_c_sharebuttons_ln_sample_content() {
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
  $module_handler = \Drupal::service('module_handler');
  /** @var \Drupal\Core\Extension\Extension $module_object */
  $module_object = $module_handler->getModule(basename(__FILE__, '.module'));
  $module_name = $module_object->getName();

  $source = drupal_get_path('module', $module_name) . '/content';
  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');
  $files = $file_system->scanDirectory($source, '/demo.*\.(yml)$/');
  $yaml_file_path = NULL;
  foreach ($files as $file) {
    $yaml_file_path[] = '/content/' . $file->filename;
  }

  return $yaml_file_path;
}
