diff --git a/libraries.drush.inc b/libraries.drush.inc
index 22b7d62..3d9f7cd 100644
--- a/libraries.drush.inc
+++ b/libraries.drush.inc
@@ -62,8 +62,8 @@ function libraries_drush_invalidate_cache() {
  */
 function libraries_drush_list() {
   $libraries = array();
-  foreach (libraries_info() as $name => $info) {
-    $libraries[$name] = libraries_detect($name);
+  foreach (\Drupal::service('libraries.manager')->info() as $name => $info) {
+    $libraries[$name] = \Drupal::service('libraries.manager')->getLibrary($name);
   }
   ksort($libraries);
 
diff --git a/libraries.info.yml b/libraries.info.yml
index 1891a6f..63b0843 100644
--- a/libraries.info.yml
+++ b/libraries.info.yml
@@ -2,3 +2,4 @@ name: Libraries
 type: module
 description: Allows version-dependent and shared usage of external libraries.
 core: 8.x
+core_version_requirement: ^8 || ^9
diff --git a/libraries.install b/libraries.install
index a2edea4..666f84e 100644
--- a/libraries.install
+++ b/libraries.install
@@ -23,6 +23,6 @@ function libraries_install() {
  */
 function libraries_uninstall() {
   if (is_dir('public://library-definitions')) {
-    file_unmanaged_delete_recursive('public://library-definitions');
+    \Drupal::service('file_system')->deleteRecursive('public://library-definitions');
   }
 }
diff --git a/libraries.module b/libraries.module
index 3006c34..7a2c9f0 100644
--- a/libraries.module
+++ b/libraries.module
@@ -6,7 +6,7 @@
  */
 
 use Drupal\Core\DrupalKernel;
-use Drupal\Core\Extension\ModuleHandler;
+use Drupal\Core\Extension\Dependency;
 use Drupal\libraries\ExternalLibrary\Asset\AttachableAssetLibraryRegistrationInterface;
 use Drupal\libraries\ExternalLibrary\Utility\LibraryAccessorInterface;
 use Drupal\libraries\ExternalLibrary\Utility\LibraryIdAccessorInterface;
@@ -115,7 +115,7 @@ function libraries_get_libraries() {
   // Similar to 'modules' and 'themes' directories inside an installation
   // profile, installation profiles may want to place libraries into a
   // 'libraries' directory.
-  if ($profile = drupal_get_profile()) {
+  if ($profile = \Drupal::installProfile()) {
     $profile_path = drupal_get_path('profile', $profile);
     $searchdir[] = "$profile_path/libraries";
   };
@@ -163,11 +163,11 @@ function libraries_get_libraries() {
  *   the files.
  *
  * @deprecated Will be removed before a stable Drupal 8 release. Please use the
- * new library load and managment concepts described at:
+ * new library load and management concepts described at:scanDirectory
  * https://www.drupal.org/node/2170763
  */
 function libraries_scan_info_files() {
-  $profile = drupal_get_path('profile', drupal_get_profile());
+  $profile = drupal_get_path('profile', \Drupal::installProfile());
   $config = DrupalKernel::findSitePath(\Drupal::request());
 
   // Build a list of directories.
@@ -179,12 +179,16 @@ function libraries_scan_info_files() {
 
   // Scan for info files.
   $files = array();
+  $file_system = \Drupal::service('file_system');
+  $mask = '@^[a-z0-9._-]+\.libraries\.info\.yml$@';
+  $options = array(
+    'key' => 'name',
+    'recurse' => FALSE,
+  );
   foreach ($directories as $dir) {
     if (file_exists($dir)) {
-      $files = array_merge($files, file_scan_directory($dir, '@^[a-z0-9._-]+\.libraries\.info\.yml$@', array(
-        'key' => 'name',
-        'recurse' => FALSE,
-      )));
+      $dir_files = $file_system->scanDirectory($dir, $mask, $options);
+      $files = array_merge($files, $dir_files);
     }
   }
 
@@ -345,29 +349,29 @@ function libraries_prepare_files(&$library, $version = NULL, $variant = NULL) {
 function libraries_detect_dependencies(&$library, $version = NULL, $variant = NULL) {
   if (isset($library['dependencies'])) {
     foreach ($library['dependencies'] as &$dependency_string) {
-      $dependency_info = ModuleHandler::parseDependency($dependency_string);
-      $dependency = libraries_detect($dependency_info['name']);
-      if (!$dependency['installed']) {
+      $dependency = Dependency::createFromString($dependency_string);
+      $info = libraries_detect($dependency->getName());
+      if (!$info['installed']) {
         $library['installed'] = FALSE;
         $library['error'] = 'missing dependency';
         $library['error message'] = t('The %dependency library, which the %library library depends on, is not installed.', array(
-          '%dependency' => $dependency['name'],
+          '%dependency' => $info['name'],
           '%library' => $library['name'],
         ));
       }
-      elseif (drupal_check_incompatibility($dependency_info, $dependency['version'])) {
+      elseif (!$dependency->isCompatible($info['version'])) {
         $library['installed'] = FALSE;
         $library['error'] = 'incompatible dependency';
         $library['error message'] = t('The version %dependency_version of the %dependency library is not compatible with the %library library.', array(
-          '%dependency_version' => $dependency['version'],
-          '%dependency' => $dependency['name'],
+          '%dependency_version' => $info['version'],
+          '%dependency' => $info['name'],
           '%library' => $library['name'],
         ));
       }
 
       // Remove the version string from the dependency, so libraries_load() can
       // load the libraries directly.
-      $dependency_string = $dependency_info['name'];
+      $dependency_string = $dependency['name'];
     }
   }
 }
@@ -840,7 +844,7 @@ function libraries_load_files($library) {
  * @see libraries_get_path()
  *
  * @deprecated Will be removed before a stable Drupal 8 release. Please use the
- * new library load and managment concepts described at:
+ * new library load and management concepts described at:
  * https://www.drupal.org/node/2170763
  */
 function libraries_get_version($library, $options) {
diff --git a/src/ExternalLibrary/LibraryManager.php b/src/ExternalLibrary/LibraryManager.php
index 17a6223..6b92d9d 100644
--- a/src/ExternalLibrary/LibraryManager.php
+++ b/src/ExternalLibrary/LibraryManager.php
@@ -61,7 +61,9 @@ class LibraryManager implements LibraryManagerInterface {
   public function getRequiredLibraryIds() {
     $library_ids = [];
     foreach (['module', 'theme'] as $type) {
-      foreach (system_get_info($type) as $info) {
+      $service_id = 'extension.list.' . $type;
+      $extension_list = \Drupal::service($service_id);
+      foreach ($extension_list->getAllInstalledInfo() as $info) {
         if (isset($info['library_dependencies'])) {
           $library_ids = array_merge($library_ids, $info['library_dependencies']);
         }
diff --git a/src/Tests/LibrariesUnitTest.php b/src/Tests/LibrariesUnitTest.php
index f616a92..e1810c9 100644
--- a/src/Tests/LibrariesUnitTest.php
+++ b/src/Tests/LibrariesUnitTest.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\libraries\Tests;
 
-use Drupal\simpletest\KernelTestBase;
+use Drupal\KernelTests\KernelTestBase;
 
 /**
  * Tests basic Libraries API functions.
diff --git a/src/Tests/LibrariesWebTest.php b/src/Tests/LibrariesWebTest.php
index 2c9254c..56f209e 100644
--- a/src/Tests/LibrariesWebTest.php
+++ b/src/Tests/LibrariesWebTest.php
@@ -3,14 +3,14 @@
 namespace Drupal\libraries\Tests;
 
 use Drupal\Component\Utility\Html;
-use Drupal\simpletest\WebTestBase;
+use Drupal\Tests\BrowserTestBase;
 
 /**
  * Tests basic detection and loading of libraries.
  *
  * @group libraries
  */
-class LibrariesWebTest extends WebTestBase {
+class LibrariesWebTest extends BrowserTestBase {
 
   /**
    * {@inheritdoc}
diff --git a/tests/modules/libraries_test/libraries_test.module b/tests/modules/libraries_test/libraries_test.module
index 1a30ebc..8605c1f 100644
--- a/tests/modules/libraries_test/libraries_test.module
+++ b/tests/modules/libraries_test/libraries_test.module
@@ -461,7 +461,7 @@ function _libraries_test_callback(&$library, $version, $variant, $group) {
   // Only set the message for the top-level library to prevent confusing,
   // duplicate messages.
   if (!isset($version) && !isset($variant) && \Drupal::state()->get('libraries_test.cache', FALSE)) {
-    drupal_set_message(SafeMarkup::set("The <em>$group</em> callback group was invoked."));
+    \Drupal::messenger()->addMessage(SafeMarkup::set("The <em>$group</em> callback group was invoked."));
   }
 }
 
diff --git a/tests/modules/libraries_test/src/Controller/ExampleController.php b/tests/modules/libraries_test/src/Controller/ExampleController.php
index 217ebf2..522967c 100644
--- a/tests/modules/libraries_test/src/Controller/ExampleController.php
+++ b/tests/modules/libraries_test/src/Controller/ExampleController.php
@@ -23,7 +23,7 @@ class ExampleController implements ContainerInjectionInterface {
    * more information.
    */
   private function buildPage($library, $variant = NULL) {
-    libraries_load($library, $variant);
+    \Drupal::service('libraries.manager')->load($library, $variant);
     // JavaScript and CSS files can be checked directly by SimpleTest, so we only
     // need to manually check for PHP files.
     $output = '';
