{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    content.field_gradient_option[0]['#markup'],
] %}
{% block paragraph %}
<div{{ attributes.addClass(classes) }}>
    {% block content %}
        {% set aligment = content.field_slide_content_position[0]['#markup']|lower|split(' ') %}
        {% set content_classes = [
            (aligment[0]) ? 'vertical-' ~ aligment[0],
            (aligment[1]) ? 'horizontal-' ~ aligment[1],
        ] %}

        {% if field_c_image %}
            {% set image_classes = ['default-slide'] %}
            {% set imageBuild = addResponsiveImageStyle(field_c_image, 'crop_dsu_c_slider_large', 'dsu_slider_style', image_classes) %}
            {% if imageBuild is not empty %}
                {{ imageBuild }}
            {% else %}
                {{ drupal_image(field_c_image, 'dsu_slider_style', responsive=true) }}
            {% endif %}
        {% endif %}
    <div {{ content_attributes.addClass(content_classes, 'fields--wrapper') }}>
        {% if content.field_c_slide_title_style[0]['#markup'] %}
            {% set title_tag=content.field_c_slide_title_style[0]['#markup'] %}
            <{{ title_tag }}> {{ content.field_c_title }}</{{ title_tag }}>
        {% else %}
            {{ content.field_c_title }}
        {% endif %}
        {{ content.field_slide_description }}
        {% if content.field_c_link['#items'].getValue() %}
            {% set button_color = 'none' %}
            {% set font_style = 'none' %}
            {% if content.field_button_color[0]['#options'] is defined %}
                {% set button_color =  content.field_button_color[0]['#options'].entity.field_color_code.value %}
            {% endif %}
            {% if content.field_button_color[0]['#options'] is defined %}
                {% set font_style =  content.field_button_color[0]['#options'].entity.field_font_color.value %}
            {% endif %}
            <div style="background:{{ button_color }}" class="image_cta_link">
                <a href="{{ content.field_c_link[0]['#url'] }}" title="{{ content.field_c_link[0]['#title'] }}"
                   style="color:{{ font_style }}">
                    {{ content.field_c_link[0]['#title'] }}
                </a>
            </div>
        {% endif %}
        </div>

    {% endblock %}
    </div>
{% endblock paragraph %}

