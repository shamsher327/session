<?php

use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_theme().
 */
function ln_c_hotspot_areas_theme($existing, $type, $theme, $path) {
  return [
    'hotspot_areas_formatter' => [
      'variables' => [
        'item' => NULL,
        'item_attributes' => NULL,
        'url' => NULL,
        'image_style' => NULL,
        'info' => NULL,
        'form' => NULL,
      ],
      'file' => 'ln_c_hotspot_areas.module',
    ],
	'paragraph__image_hotspots_areas' => [
      'template' => 'paragraph--image-hotspots-areas',
      'base hook' => 'paragraphs',
    ],
  ];
}

/**
 * Prepares variables for image formatter with hotspots templates.
 *
 * Default template: hotspot-areas-formatter.html.twig.
 *
 * @see template_preprocess_image_formatter
 */
function template_preprocess_hotspot_areas_formatter(&$variables) {
  // Add field.inc file.
  module_load_include('inc', 'image', 'image.field');
  template_preprocess_image_formatter($variables);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * If file was deleted we need to delete all hotspots that referenced on it.
 * So insert all of them in on cron run deletion queue.
 */
function ln_c_hotspot_areas_file_delete(EntityInterface $entity) {
  $fid = $entity->id();
  $hids = Drupal::entityQuery('hotspot_area')
    ->condition('fid', $fid, '=')
    ->execute();
  $queue = Drupal::queue('cron_ln_c_hotspot_areas_deletion', TRUE);
  $queue->createQueue();
  foreach ($hids as $hid) {
    $queue->createItem( ['hid' => $hid] );
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * If image style was deleted we need to delete all hotspots that referenced on
 * it. So insert all of them in on cron run deletion queue.
 */
function ln_c_hotspot_areas_image_style_delete(EntityInterface $entity) {
  $style_name = $entity->id();
  $hids = Drupal::entityQuery('hotspot_area')
    ->condition('image_style', $style_name, '=')
    ->execute();
  $queue = Drupal::queue('cron_ln_c_hotspot_areas_deletion', TRUE);
  $queue->createQueue();
  foreach ($hids as $hid) {
    $queue->createItem( ['hid' => $hid] );
  }
}

/**
 * Implements hook_ln_sample_content().
 */
function ln_c_hotspot_areas_ln_sample_content() {
    /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
    $module_handler = \Drupal::service('module_handler');
    /** @var \Drupal\Core\Extension\Extension $module_object */
    $module_object = $module_handler->getModule(basename(__FILE__, '.module'));
    $module_name = $module_object->getName();

    $source = drupal_get_path('module', $module_name) . '/content';
    /** @var \Drupal\Core\File\FileSystemInterface $file_system */
    $file_system = \Drupal::service('file_system');
    $files = $file_system->scanDirectory($source, '/demo.*\.(yml)$/');
    $yaml_file_path = NULL;
    foreach ($files as $file) {
        $yaml_file_path[] = '/content/' . $file->filename;
    }

    return $yaml_file_path;
}