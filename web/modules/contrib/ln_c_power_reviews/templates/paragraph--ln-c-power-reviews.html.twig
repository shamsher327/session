{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{% block paragraph %}
    <div{{ attributes.addClass(classes) }}>
        {# Load the Power reviews libraries for ui component styling #}
        {{ attach_library('ln_c_power_reviews/ln-c-power-reviews-library') }}
        {% block content %}
            {# Get the all respective variables from configurations. #}
            {# Get the type of display component. #}
            {% set field_ln_c_pr_display_comp_type=content.field_ln_c_pr_display_comp_type.0['#markup']|striptags|raw %}
            {# Enable review filter while rendering all power reviews data. #}
            {% set field_ln_c_pr_enable_rev_filter=content.field_ln_c_pr_enable_rev_filter.0['#markup']|striptags|raw %}
            {# Image type component and it display type. #}
            {% set field_ln_c_pr_img_comp_disp_type=content.field_ln_c_pr_img_comp_disp_type.0['#markup']|striptags|raw %}
            {# Get the page id for rendering the reviews. #}
            {% set field_ln_c_pr_page_id=content.field_ln_c_pr_page_id.0['#context']['value']|striptags|raw %}
            {# Get the questions and answer display component. #}
            {% set field_ln_c_pr_ques_ans_comp_styl=content.field_ln_c_pr_ques_ans_comp_styl.0['#markup']|striptags|raw %}
            {% set field_ln_c_pr_rev_disp_comp_type=content.field_ln_c_pr_rev_disp_comp_type.0['#markup']|striptags|raw %}
            {% set field_ln_c_pr_dis_snapshot_type=content.field_ln_c_pr_dis_snapshot_type.0['#markup']|striptags|raw %}

            {# Get and rendering component for review display, questions and image type. #}
            {% if field_ln_c_pr_display_comp_type == 'pr_review_display' or field_ln_c_pr_display_comp_type == 'pr_questions_answers' or field_ln_c_pr_display_comp_type == 'pr_image' or field_ln_c_pr_display_comp_type == 'pr_write_review_form' %}
                <script>
                  POWERREVIEWS.display.render({
                    api_key: '{{ pr_settings_key.pr_api_key_read }}',
                    locale: '{{ pr_settings_key.pr_locale }}',
                    merchant_group_id: '{{ pr_settings_key.pr_merchant_group_id }}',
                    merchant_id: '{{ pr_settings_key.pr_merchant_id }}',
                    page_id: '{{ field_ln_c_pr_page_id }}',
                    ENABLE_REVIEW_FILTERING: '{{ field_ln_c_pr_enable_rev_filter ? 'true' : 'false' }}',
                    REVIEW_DISPLAY_SNAPSHOT_TYPE: '{{ field_ln_c_pr_dis_snapshot_type }}',
                    Enable_CONTENT_COLLECTION_MODAL: 'true',
                    REVIEW_DISPLAY_PAGINATION_TYPE: 'VERTICAL',
                    components: {
                      ReviewDisplay: 'pr_reviewdisplay',
                      ReviewSnippet: 'pr_reviewsnippet',
                      ReviewList: 'pr_reviewlist',
                      CategorySnippet: 'pr_categorysnippet',
                      SizeFitSnippet: 'pr_sizesnippet',
                      ReviewSnapshot: 'pr_reviewsnapshot',
                      ReviewImageSnippet: 'pr_review_imagesnippet',
                      ReviewImageDisplay: 'pr_review_imagedisplay',
                      QuestionSnippet: 'pr_questionsnippet',
                      QuestionDisplay: 'pr_questiondisplay'
                    }
                  });
                </script>

                {# Get the review display markup from configurations. #}
            {% if field_ln_c_pr_display_comp_type == 'pr_review_display' %}
                <div class="render-pr-review-display">
                    {% for key in content.field_ln_c_pr_rev_disp_comp_type %}
                        {% if key['#markup'] is not empty %}
                            <div id="{{ key['#markup'] }}"></div>
                        {% endif %}
                    {% endfor %}
                </div>
            {% endif %}

                {# Render questions and answer display type component from power reviews. #}
            {% if field_ln_c_pr_display_comp_type == 'pr_questions_answers' %}
                <div class="render-pr-questions-answers">
                    {% for key in content.field_ln_c_pr_ques_ans_comp_styl %}
                        {% if key['#markup'] is not empty %}
                            <div id="{{ key['#markup'] }}"></div>
                        {% endif %}
                    {% endfor %}
                </div>
            {% endif %}

                {# Render image display type component from power reviews. #}
            {% if field_ln_c_pr_display_comp_type == 'pr_image' %}
                <div class="render-pr-image">
                    {% for key in content.field_ln_c_pr_img_comp_disp_type %}
                        {% if key['#markup'] is not empty %}
                            <div id="{{ key['#markup'] }}"></div>
                        {% endif %}
                    {% endfor %}
                </div>
            {% endif %}

                {# Render write a form from power reviews. #}
            {% if field_ln_c_pr_display_comp_type == 'pr_write_review_form' %}
                <div class="render-pr-write-review-form">
                    <div id="pr_reviewdisplay"></div>
                    <div id="pr_sizesnippet"></div>
                </div>
            {% endif %}
            {% endif %}
        {% endblock %}
    </div>
{% endblock paragraph %}
