<?php

/**
 * @file
 * Contains dsu_ratings_reviews.module.
 */

use Drupal\comment\CommentInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter;
use Drupal\dsu_ratings_reviews\RatingsReviewsFlagAdapter;
use Drupal\dsu_ratings_reviews\RatingsReviewsMailAdapter;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_page_attachments().
 */
function dsu_ratings_reviews_page_attachments(array &$page) {
  // Send event tracking for getting product from ratings reviews.
  $page['#attached']['library'][] = 'dsu_ratings_reviews/dsu-event-tracking';
}

/**
 * Implements hook_comment_links_alter().
 */
function dsu_ratings_reviews_comment_links_alter(array &$links, CommentInterface $entity, array &$context) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->commentLinksAlter($links, $entity, $context);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dsu_ratings_reviews_form_comment_form_alter(&$form, &$form_state, $form_id) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->formCommentFormAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_entity_view_alter().
 */
function dsu_ratings_reviews_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->entityViewAlter($build, $entity, $display);
}

/**
 * Implements hook_entity_extra_field_info().
 */
function dsu_ratings_reviews_entity_extra_field_info() {
  $extra = [];

  // Add pseudo field to render the only allowed admin reply.
  $extra['comment'][RatingsReviewsDisplayAdapter::COMMENT_TYPE]['display']['reply'] = [
    'label' => t('Reply'),
    'description' => t('Shows the administrator or brand official reply.'),
    'weight' => 100,
    'visible' => TRUE,
  ];

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function dsu_ratings_reviews_comment_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->commentView($build, $entity, $display, $view_mode);
}

/**
 * Implements hook_form_FORM_ID_alter() for views_exposed_form.
 */
function dsu_ratings_reviews_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->commentsExposedFormAlter($form, $form_state, $form_id);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dsu_ratings_reviews_theme_suggestions_comment_alter(array &$suggestions, array $variables) {
  // Suggestion by bundle.
  $comment = $variables['elements']['#comment'];
  $suggestions[] = 'comment__' . $comment->bundle();

  // Different template for replies by bundle.
  $parent_comment = $comment->get('pid')->getValue();
  if (!empty($parent_comment[0]['target_id'])) {
    $suggestions[] = 'comment__' . $comment->bundle() . '__reply';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function dsu_ratings_reviews_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  $is_comment = !empty($element['#field_type']) && $element['#field_type'] === 'comment';
  $has_formatter = !empty($element['#formatter']) && $element['#formatter'] === 'dsu_ratings_reviews_comment_formatter';
  if ($is_comment && $has_formatter && !empty($element[0]['#comment_type'])) {
    $suggestions[] = 'field__comment__type__' . $element[0]['#comment_type'];
  }
}

/**
 * Implements hook_theme().
 */
function dsu_ratings_reviews_theme() {
  $theme['flag__dsu_ratings_comment_useful'] = [
    'template' => 'flag/flag--dsu-ratings-comment-useful',
  ];
  $theme['flag__dsu_ratings_comment_unuseful'] = [
    'template' => 'flag/flag--dsu-ratings-comment-unuseful',
  ];
  $theme['comment__dsu_ratings_reviews_comment_type'] = [
    'base hook' => 'comment',
    'template' => 'content/comment--dsu-ratings-reviews-comment-type',
  ];
  $theme['comment__dsu_ratings_reviews_comment_type__reply'] = [
    'base hook' => 'comment',
    'template' => 'content/comment--dsu-ratings-reviews-comment-type--reply',
  ];
  $theme['field__comment__type__dsu_ratings_reviews_comment_type'] = [
    'base hook' => 'field',
    'template' => 'field/field--comment--type--dsu-ratings-reviews-comment-type',
  ];
  $theme['page_statistics'] = [
    'template' => 'page-statistics',
    'variables' => [
      'data' => [],
      'bundle_select_form' => [],
      'node_select_form' => [],
      'node' => NULL,
    ],
  ];
  return $theme;
}

/**
 * Implements hook_preprocess_node_links_alter().
 */
function dsu_ratings_reviews_node_links_alter(array &$links, NodeInterface $entity, array &$context) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->nodeLinksAlter($links, $entity, $context);
}

/**
 * Implements hook_entity_insert().
 *
 * Un-flags/flags reverse flag for DSU comments.
 */
function dsu_ratings_reviews_entity_insert(EntityInterface $entity) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsFlagAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsFlagAdapter::class);
  $adapter->flaggingEntityInsert($entity);

  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsMailAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsMailAdapter::class);
  $adapter->commentInsertSendMail($entity);
}

/**
 * Implements hook_mail().
 */
function dsu_ratings_reviews_mail($key, &$message, $params) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsMailAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsMailAdapter::class);
  $adapter->sendMail($key, $message, $params);
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function dsu_ratings_reviews_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->entityBundleFieldInfoAlter($fields, $entity_type, $bundle);
}

/**
 * Implements hook_entity_view_mode_alter().
 *
 * Modifies reply comments to use its own view mode.
 */
function dsu_ratings_reviews_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->entityViewModeAlter($view_mode, $entity, $context);
}

/**
 * Implements hook_entity_form_display_alter().
 *
 * Modifies reply comments to use its own form mode.
 */
function dsu_ratings_reviews_entity_form_display_alter(&$form_display, $context) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->entityFormDisplayAlter($form_display, $context);
}

/**
 * Implements hook_views_query_alter().
 *
 * Hides unpublished comments when the user don't have permissions.
 */
function dsu_ratings_reviews_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->viewsQueryAlter($view, $query);
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * Render Yes option before the No option.
 */
function dsu_ratings_reviews_field_widget_options_buttons_form_alter(&$element, FormStateInterface $form_state, $context) {
  if ($context['form']['#id'] === 'comment-form' && $context['items']->getName() === 'field_dsu_recommend') {
    $first = $element['#options'][0];
    unset($element['#options'][0]);
    $element['#options'][0] = $first;
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Alters comments so replies are always published by default.
 * Also check ratings are always within values and/or 4-stars.
 */
function dsu_ratings_reviews_entity_presave(EntityInterface $entity) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->entityPresave($entity);
}

/**
 * Implements hook_preprocess_menu().
 *
 * Prevents admin from seeing unneeded moderator menus.
 */
function dsu_ratings_reviews_preprocess_menu(&$variables) {
  /** @var \Drupal\dsu_ratings_reviews\RatingsReviewsDisplayAdapter $adapter */
  $adapter = \Drupal::classResolver()->getInstanceFromDefinition(RatingsReviewsDisplayAdapter::class);
  $adapter->preprocessMenu($variables);
}
